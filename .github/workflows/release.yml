name: 'C++ CI - Multiplatform Release'

on:
  push

jobs:
  build-linux:
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true
      
      - run: sudo apt-get update && sudo apt-get install libboost-test-dev -y
      - run: cmake . -DPATCH_VERSION=${{ github.run_number }}
      - run: cmake --build .
      - run: cmake --build . --target test
      - run: cmake --build . --target package
      
      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: helloworld-linux
          path: |
            ./helloworld-0.0.${{ github.run_number }}-Linux.deb

  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          submodules: true
      
      - name: Install Boost via Chocolatey
        run: choco install boost-msvc-14.3 -y

      - name: Configure CMake
        run: |
          mkdir build
          cd build
          cmake .. -DPATCH_VERSION=${{ github.run_number }} -DBOOST_STATIC=ON

      - name: Build
        run: |
          cd build
          cmake --build . --config Release
      
      - name: Run tests
        run: |
          cd build
          ctest -C Release --output-on-failure --verbose
      
      - name: Create package
        run: |
          mkdir package
          copy build\Release\helloworld.exe package\
          powershell -Command "Compress-Archive -Path 'package\*' -DestinationPath 'helloworld-${{ github.run_number }}-Windows.zip' -Force"
      
      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: helloworld-windows
          path: |
            helloworld-${{ github.run_number }}-Windows.zip
            package/helloworld.exe
          retention-days: 5

  create-release:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
      
      - name: Download Linux artifacts
        uses: actions/download-artifact@v4
        with:
          name: helloworld-linux
          path: ./artifacts/linux
      
      - name: Download Windows artifacts
        uses: actions/download-artifact@v4
        with:
          name: helloworld-windows
          path: ./artifacts/windows
      
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v0.0.${{ github.run_number }}
          release_name: Release v0.0.${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: Upload Linux DEB Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/linux/helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_name: helloworld-0.0.${{ github.run_number }}-Linux.deb
          asset_content_type: application/vnd.debian.binary-package
      
      - name: Upload Windows ZIP Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./artifacts/windows/helloworld-${{ github.run_number }}-Windows.zip
          asset_name: helloworld-${{ github.run_number }}-Windows.zip
          asset_content_type: application/zip
